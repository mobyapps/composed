
server {
    listen       80;
    listen  [::]:80;
    server_name  example.com;
    root         /var/www/ip_site;

    access_log     off;
    log_not_found  off;

    return 301 https://example.com$request_uri;
}

server {
    listen       443 ssl http2;
    listen       443 http3 reuseport;
    listen  [::]:443 ssl http2;
    listen  [::]:443 http3 reuseport;
    server_name  example.com;

    add_header Alt-Svc 'h3=":443"; ma=86400,h3-29=":443"; ma=86400' always;

    root         /var/www/ip_site;

    include /repos/nginxconf/http/example.com.ssl.conf;
    include /repos/nginxconf/http/_headers.conf;

    access_log     off;
    log_not_found  off;

    return 301 https://example.com$request_uri;
}

server {
    listen       443 ssl http2;
    listen       443 http3 reuseport;
    listen  [::]:443 ssl http2;
    listen  [::]:443 http3 reuseport;
    server_name  example.com;

    add_header Alt-Svc 'h3=":443"; ma=86400,h3-29=":443"; ma=86400' always;

    set  $sitesdir /repos/project/project/sites;
    set  $entrydir example.com;
    root $sitesdir/$entrydir/web;

    include /repos/nginxconf/http/example.com.ssl.conf;
    include /repos/nginxconf/http/_headers.conf;

    # 这种方式虽然可以省下一个 RTT 但是牺牲了前向安全性和抵抗重放攻击的能力
    # ssl_early_data on;
    # proxy_set_header Early-Data $ssl_early_data;

    location / {
        # access_by_lua_file /path/to/access.lua;
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ /\.(?!well-known) {
        access_log     off;
        log_not_found  off;
        deny all;
    }

    # security.txt
    location = /.well-known/security.txt {
        alias /repos/project/project/security.txt;
    }

    location ~ ^/index\.php(/|$) {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_param ENTRY_DIR $entrydir;

        internal;
    }

    location = /example.php {
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
    }

    location ~ \.php$ {
        return 404;
    }
}
